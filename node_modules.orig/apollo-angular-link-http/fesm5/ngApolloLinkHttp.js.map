{"version":3,"file":"ngApolloLinkHttp.js","sources":["ng://apollo-angular-link-http/HttpLink.ts","ng://apollo-angular-link-http/HttpLinkModule.ts","ng://apollo-angular-link-http/ngApolloLinkHttp.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  ApolloLink,\n  Observable as LinkObservable,\n  Operation,\n  FetchResult,\n} from 'apollo-link';\nimport {print} from 'graphql';\nimport {\n  fetch,\n  Options,\n  Body,\n  Request,\n  Context,\n  mergeHeaders,\n  prioritize,\n} from 'apollo-angular-link-http-common';\nimport {extractFiles} from 'extract-files';\n\n// XXX find a better name for it\nexport class HttpLinkHandler extends ApolloLink {\n  public requester: (\n    operation: Operation,\n  ) => LinkObservable<FetchResult> | null;\n\n  constructor(private httpClient: HttpClient, private options: Options) {\n    super();\n\n    this.requester = (operation: Operation) =>\n      new LinkObservable((observer: any) => {\n        const context: Context = operation.getContext();\n\n        // decides which value to pick, Context, Options or to just use the default\n        const pick = <K extends keyof Context | keyof Options>(\n          key: K,\n          init?: Context[K] | Options[K],\n        ): Context[K] | Options[K] => {\n          return prioritize(context[key], this.options[key], init);\n        };\n\n        const includeQuery = pick('includeQuery', true);\n        const includeExtensions = pick('includeExtensions', false);\n        const method = pick('method', 'POST');\n        const url = pick('uri', 'graphql');\n        const withCredentials = pick('withCredentials');\n        const useMultipart = pick('useMultipart');\n\n        const req: Request = {\n          method,\n          url: typeof url === 'function' ? url(operation) : url,\n          body: {\n            operationName: operation.operationName,\n            variables: operation.variables,\n          },\n          options: {\n            withCredentials,\n            useMultipart,\n            headers: this.options.headers,\n          },\n        };\n\n        if (includeExtensions) {\n          (req.body as Body).extensions = operation.extensions;\n        }\n\n        if (includeQuery) {\n          (req.body as Body).query = print(operation.query);\n        }\n\n        if (context.headers) {\n          req.options.headers = mergeHeaders(\n            req.options.headers,\n            context.headers,\n          );\n        }\n\n        const sub = fetch(req, this.httpClient, extractFiles).subscribe({\n          next: response => {\n            operation.setContext({response});\n            observer.next(response.body);\n          },\n          error: err => observer.error(err),\n          complete: () => observer.complete(),\n        });\n\n        return () => {\n          if (!sub.closed) {\n            sub.unsubscribe();\n          }\n        };\n      });\n  }\n\n  public request(op: Operation): LinkObservable<FetchResult> | null {\n    return this.requester(op);\n  }\n}\n\n@Injectable()\nexport class HttpLink {\n  constructor(private httpClient: HttpClient) {}\n\n  public create(options: Options): HttpLinkHandler {\n    return new HttpLinkHandler(this.httpClient, options);\n  }\n}\n","import {NgModule} from '@angular/core';\n\nimport {HttpLink} from './HttpLink';\n\nexport const PROVIDERS = [HttpLink];\n\n@NgModule({\n  providers: PROVIDERS,\n})\nexport class HttpLinkModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__extends","LinkObservable"],"mappings":"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"}