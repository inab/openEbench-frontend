/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FormArray, FormGroup, FormControl } from '@angular/forms';
import { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp, wrapProperty } from '../../utils';
/**
 * @param {?} field
 * @param {?=} emitEvent
 * @return {?}
 */
export function unregisterControl(field, emitEvent) {
    if (emitEvent === void 0) { emitEvent = false; }
    /** @type {?} */
    var form = (/** @type {?} */ (field.formControl.parent));
    if (!form) {
        return;
    }
    /** @type {?} */
    var control = field.formControl;
    /** @type {?} */
    var opts = { emitEvent: emitEvent };
    if (form instanceof FormArray) {
        /** @type {?} */
        var key_1 = form.controls.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c === control; }));
        if (key_1 !== -1) {
            updateControl(form, opts, (/**
             * @return {?}
             */
            function () { return form.removeAt(key_1); }));
        }
    }
    else if (form instanceof FormGroup) {
        /** @type {?} */
        var paths = getKeyPath(field);
        /** @type {?} */
        var key_2 = paths[paths.length - 1];
        if (form.get([key_2]) === control) {
            updateControl(form, opts, (/**
             * @return {?}
             */
            function () { return form.removeControl(key_2); }));
        }
    }
    control.setParent(null);
}
/**
 * @param {?} field
 * @return {?}
 */
export function findControl(field) {
    if (field.formControl) {
        return field.formControl;
    }
    if (field['shareFormControl'] === false) {
        return null;
    }
    /** @type {?} */
    var form = (/** @type {?} */ (field.parent.formControl));
    return form ? form.get(getKeyPath(field)) : null;
}
/**
 * @param {?} field
 * @param {?=} control
 * @param {?=} emitEvent
 * @return {?}
 */
export function registerControl(field, control, emitEvent) {
    if (emitEvent === void 0) { emitEvent = false; }
    control = control || field.formControl;
    if (!control['_fields']) {
        defineHiddenProp(control, '_fields', []);
    }
    if (control['_fields'].indexOf(field) === -1) {
        control['_fields'].push(field);
    }
    if (!field.formControl && control) {
        defineHiddenProp(field, 'formControl', control);
        control.setValidators(null);
        control.setAsyncValidators(null);
        field.templateOptions.disabled = !!field.templateOptions.disabled;
        wrapProperty(field.templateOptions, 'disabled', (/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var firstChange = _a.firstChange, currentValue = _a.currentValue;
            if (!firstChange) {
                currentValue ? field.formControl.disable() : field.formControl.enable();
            }
        }));
        if (control.registerOnDisabledChange) {
            control.registerOnDisabledChange((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                field.templateOptions['___$disabled'] = value;
                // TODO remove in V6
                field.options && field.options._markForCheck(field);
            }));
        }
    }
    /** @type {?} */
    var parent = (/** @type {?} */ (field.parent.formControl));
    if (!parent || !field.key) {
        return;
    }
    /** @type {?} */
    var paths = getKeyPath(field);
    /** @type {?} */
    var value = getFieldValue(field);
    if (!(isNullOrUndefined(control.value) && isNullOrUndefined(value))
        && control.value !== value
        && control instanceof FormControl) {
        control.patchValue(value);
    }
    var _loop_1 = function (i) {
        /** @type {?} */
        var path = paths[i];
        if (!parent.get([path])) {
            updateControl(parent, { emitEvent: emitEvent }, (/**
             * @return {?}
             */
            function () { return parent.setControl(path, new FormGroup({})); }));
        }
        parent = (/** @type {?} */ (parent.get([path])));
    };
    for (var i = 0; i < (paths.length - 1); i++) {
        _loop_1(i);
    }
    /** @type {?} */
    var key = paths[paths.length - 1];
    if (!field._hide && parent.get([key]) !== control) {
        updateControl(parent, { emitEvent: emitEvent }, (/**
         * @return {?}
         */
        function () { return parent.setControl(key, control); }));
    }
}
/**
 * @param {?} c
 * @return {?}
 */
export function updateValidity(c) {
    /** @type {?} */
    var status = c.status;
    c.updateValueAndValidity({ emitEvent: false });
    if (status !== c.status) {
        ((/** @type {?} */ (c.statusChanges))).emit(c.status);
    }
}
/**
 * @param {?} form
 * @param {?} opts
 * @param {?} action
 * @return {?}
 */
function updateControl(form, opts, action) {
    /**
     *  workaround for https://github.com/angular/angular/issues/27679
     */
    if (form instanceof FormGroup && !form['__patchForEachChild']) {
        defineHiddenProp(form, '__patchForEachChild', true);
        ((/** @type {?} */ (form)))._forEachChild = (/**
         * @param {?} cb
         * @return {?}
         */
        function (cb) {
            Object
                .keys(form.controls)
                .forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) { return form.controls[k] && cb(form.controls[k], k); }));
        });
    }
    /**
     * workaround for https://github.com/angular/angular/issues/20439
     * @type {?}
     */
    var updateValueAndValidity = form.updateValueAndValidity.bind(form);
    if (opts.emitEvent === false) {
        form.updateValueAndValidity = (/**
         * @param {?} opts
         * @return {?}
         */
        function (opts) {
            updateValueAndValidity(tslib_1.__assign({}, (opts || {}), { emitEvent: false }));
        });
    }
    action();
    if (opts.emitEvent === false) {
        form.updateValueAndValidity = updateValueAndValidity;
    }
}
/**
 * @param {?} form
 * @return {?}
 */
export function clearControl(form) {
    form['_fields'] && delete form['_fields'];
    if (form instanceof FormGroup || form instanceof FormArray) {
        Object.keys(form.controls)
            .forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return clearControl(form.controls[k]); }));
    }
}
//# sourceMappingURL=data:application/json;base64,