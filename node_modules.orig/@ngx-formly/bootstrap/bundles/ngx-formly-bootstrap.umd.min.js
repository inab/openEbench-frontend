!function(o,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("rxjs/operators"),require("@angular/core"),require("@angular/common"),require("@angular/forms"),require("@ngx-formly/core"),require("@ngx-formly/core/select"),require("@ngx-formly/bootstrap/addons")):"function"==typeof define&&define.amd?define("@ngx-formly/bootstrap",["exports","rxjs/operators","@angular/core","@angular/common","@angular/forms","@ngx-formly/core","@ngx-formly/core/select","@ngx-formly/bootstrap/addons"],e):e((o["ngx-formly"]=o["ngx-formly"]||{},o["ngx-formly"].bootstrap={}),o.rxjs.operators,o.ng.core,o.ng.common,o.ng.forms,o.core$1,o.select,o["ngx-formly"].bootstrap.addons)}(this,function(o,l,n,e,r,t,i,c){"use strict";var a=function(o,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,e){o.__proto__=e}||function(o,e){for(var t in e)e.hasOwnProperty(t)&&(o[t]=e[t])})(o,e)};function s(o,e){function t(){this.constructor=o}a(o,e),o.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}var p=function(){return(p=Object.assign||function(o){for(var e,t=1,n=arguments.length;t<n;t++)for(var r in e=arguments[t])Object.prototype.hasOwnProperty.call(e,r)&&(o[r]=e[r]);return o}).apply(this,arguments)};function m(o,e){var t="function"==typeof Symbol&&o[Symbol.iterator];if(!t)return o;var n,r,l=t.call(o),i=[];try{for(;(void 0===e||0<e--)&&!(n=l.next()).done;)i.push(n.value)}catch(c){r={error:c}}finally{try{n&&!n.done&&(t=l["return"])&&t.call(l)}finally{if(r)throw r.error}}return i}function f(){for(var o=[],e=0;e<arguments.length;e++)o=o.concat(m(arguments[e]));return o}var u=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{indeterminate:!0,hideLabel:!0,formCheck:"custom"}},o}return s(o,e),o.decorators=[{type:n.Component,args:[{selector:"formly-field-checkbox",template:"\n    <div [ngClass]=\"{\n      'form-check': to.formCheck.indexOf('custom') === -1,\n      'form-check-inline': to.formCheck === 'inline',\n      'custom-control': to.formCheck.indexOf('custom') === 0,\n      'custom-checkbox': to.formCheck === 'custom' || to.formCheck === 'custom-inline',\n      'custom-control-inline': to.formCheck === 'custom-inline',\n      'custom-switch': to.formCheck === 'custom-switch'\n    }\">\n      <input type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n        [class.position-static]=\"to.formCheck === 'nolabel'\"\n        [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n        [indeterminate]=\"to.indeterminate && formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label [for]=\"id\"\n        *ngIf=\"to.formCheck !== 'nolabel'\"\n        [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n        [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n      >\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\" aria-hidden=\"true\">*</span>\n      </label>\n    </div>\n  "}]}],o}(t.FieldType),d=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{options:[],formCheck:"custom"}},o}return s(o,e),o.prototype.onChange=function(e,o){var t;"array"===this.to.type?this.formControl.patchValue(o?f(this.formControl.value||[],[e]):f(this.formControl.value||[]).filter(function(o){return o!==e})):this.formControl.patchValue(p({},this.formControl.value,((t={})[e]=o,t))),this.formControl.markAsTouched()},o.prototype.isChecked=function(o){var e=this.formControl.value;return e&&("array"===this.to.type?-1!==e.indexOf(o.value):e[o.value])},o.decorators=[{type:n.Component,args:[{selector:"formly-field-multicheckbox",template:"\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{\n          'form-check': to.formCheck.indexOf('custom') === -1,\n          'form-check-inline': to.formCheck === 'inline',\n          'custom-control': to.formCheck.indexOf('custom') === 0,\n          'custom-checkbox': to.formCheck === 'custom' || to.formCheck === 'custom-inline',\n          'custom-control-inline': to.formCheck === 'custom-inline',\n          'custom-switch': to.formCheck === 'custom-switch'\n        }\"\n      >\n        <input type=\"checkbox\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n          [value]=\"option.value\"\n          [checked]=\"isChecked(option)\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange(option.value, $event.target.checked)\">\n        <label\n          [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  "}]}],o}(t.FieldType),h=function(o){function e(){return null!==o&&o.apply(this,arguments)||this}return s(e,o),Object.defineProperty(e.prototype,"type",{get:function(){return this.to.type||"text"},enumerable:!0,configurable:!0}),e.decorators=[{type:n.Component,args:[{selector:"formly-field-input",template:'\n    <input *ngIf="type !== \'number\' else numberTmp" [type]="type" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    <ng-template #numberTmp>\n      <input type="number" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    </ng-template>\n  '}]}],e}(t.FieldType),g=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{options:[],formCheck:"custom"}},o}return s(o,e),o.decorators=[{type:n.Component,args:[{selector:"formly-field-radio",template:'\n    <div>\n      <div *ngFor="let option of to.options | formlySelectOptions:field | async; let i = index;"\n        [ngClass]="{\n          \'form-check\': to.formCheck.indexOf(\'custom\') === -1,\n          \'form-check-inline\': to.formCheck === \'inline\',\n          \'custom-control custom-radio\': to.formCheck.indexOf(\'custom\') === 0,\n          \'custom-control-inline\': to.formCheck === \'custom-inline\'\n        }"\n      >\n        <input type="radio"\n          [id]="id + \'_\' + i"\n          [class.form-check-input]="to.formCheck.indexOf(\'custom\') === -1"\n          [class.custom-control-input]="to.formCheck.indexOf(\'custom\') === 0"\n          [name]="field.name || id"\n          [class.is-invalid]="showError"\n          [attr.value]="option.value"\n          [value]="option.value"\n          [formControl]="formControl"\n          [formlyAttributes]="field"\n          [attr.disabled]="option.disabled || formControl.disabled ? true : null">\n        <label\n          [class.form-check-label]="to.formCheck.indexOf(\'custom\') === -1"\n          [class.custom-control-label]="to.formCheck.indexOf(\'custom\') === 0"\n          [for]="id + \'_\' + i">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  '}]}],o}(t.FieldType),y=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{cols:1,rows:1}},o}return s(o,e),o.decorators=[{type:n.Component,args:[{selector:"formly-field-textarea",template:'\n    <textarea [formControl]="formControl" [cols]="to.cols"\n      [rows]="to.rows" class="form-control" [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n    </textarea>\n  '}]}],o}(t.FieldType),b=function(t){function o(o){var e=t.call(this)||this;return e.ngZone=o,e.defaultOptions={templateOptions:{options:[],compareWith:function(o,e){return o===e}}},e}return s(o,t),Object.defineProperty(o.prototype,"selectAccessor",{set:function(t){var n=this;if(t){var r=t.writeValue.bind(t);null===t._getOptionId(t.value)&&r(t.value),t.writeValue=function(o){var e=t._idCounter;r(o),null===o&&n.ngZone.onStable.asObservable().pipe(l.take(1)).subscribe(function(){e!==t._idCounter&&null===t._getOptionId(o)&&-1!==t._elementRef.nativeElement.selectedIndex&&r(o)})}}},enumerable:!0,configurable:!0}),o.decorators=[{type:n.Component,args:[{selector:"formly-field-select",template:'\n    <select *ngIf="to.multiple; else singleSelect" class="form-control"\n      multiple\n      [class.custom-select]="to.customSelect"\n      [formControl]="formControl"\n      [compareWith]="to.compareWith"\n      [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n      <ng-container *ngIf="to.options | formlySelectOptions:field | async as opts">\n        <ng-container *ngIf="to._flatOptions else grouplist">\n          <ng-container *ngFor="let opt of opts">\n            <option [ngValue]="opt.value" [disabled]="opt.disabled">{{ opt.label }}</option>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #grouplist>\n          <ng-container *ngFor="let opt of opts">\n            <option *ngIf="!opt.group else optgroup" [ngValue]="opt.value" [disabled]="opt.disabled">{{ opt.label }}</option>\n            <ng-template #optgroup>\n              <optgroup [label]="opt.label">\n                <option *ngFor="let child of opt.group" [ngValue]="child.value" [disabled]="child.disabled">\n                  {{ child.label }}\n                </option>\n              </optgroup>\n            </ng-template>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class="form-control"\n        [formControl]="formControl"\n        [compareWith]="to.compareWith"\n        [class.custom-select]="to.customSelect"\n        [class.is-invalid]="showError"\n        [formlyAttributes]="field">\n        <option *ngIf="to.placeholder" [ngValue]="null">{{ to.placeholder }}</option>\n        <ng-container *ngIf="to.options | formlySelectOptions:field | async as opts">\n          <ng-container *ngIf="to._flatOptions else grouplist">\n            <ng-container *ngFor="let opt of opts">\n              <option [ngValue]="opt.value" [disabled]="opt.disabled">{{ opt.label }}</option>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #grouplist>\n            <ng-container *ngFor="let opt of opts">\n              <option *ngIf="!opt.group else optgroup" [ngValue]="opt.value" [disabled]="opt.disabled">{{ opt.label }}</option>\n              <ng-template #optgroup>\n                <optgroup [label]="opt.label">\n                  <option *ngFor="let child of opt.group" [ngValue]="child.value" [disabled]="child.disabled">\n                    {{ child.label }}\n                  </option>\n                </optgroup>\n              </ng-template>\n            </ng-container>\n          </ng-template>\n        </ng-container>\n      </select>\n    </ng-template>\n  '}]}],o.ctorParameters=function(){return[{type:n.NgZone}]},o.propDecorators={selectAccessor:[{type:n.ViewChild,args:[r.SelectControlValueAccessor]}]},o}(t.FieldType),C=function(o){function e(){return null!==o&&o.apply(this,arguments)||this}return s(e,o),e.decorators=[{type:n.Component,args:[{selector:"formly-wrapper-form-field",template:'\n    <div class="form-group" [class.has-error]="showError">\n      <label *ngIf="to.label && to.hideLabel !== true" [attr.for]="id">\n        {{ to.label }}\n        <span *ngIf="to.required && to.hideRequiredMarker !== true" aria-hidden="true">*</span>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf="showError" class="invalid-feedback" [style.display]="\'block\'">\n        <formly-validation-message [field]="field"></formly-validation-message>\n      </div>\n\n      <small *ngIf="to.description" class="form-text text-muted">{{ to.description }}</small>\n    </div>\n  '}]}],e}(t.FieldWrapper),v=[h,u,g,b,y,d,C],k={types:[{name:"input",component:h,wrappers:["form-field"]},{name:"checkbox",component:u,wrappers:["form-field"]},{name:"radio",component:g,wrappers:["form-field"]},{name:"select",component:b,wrappers:["form-field"]},{name:"textarea",component:y,wrappers:["form-field"]},{name:"multicheckbox",component:d,wrappers:["form-field"]}],wrappers:[{name:"form-field",component:C}]},x=function(){function o(){}return o.decorators=[{type:n.NgModule,args:[{declarations:[v],imports:[e.CommonModule,r.ReactiveFormsModule,i.FormlySelectModule,t.FormlyModule.forChild(k),c.FormlyBootstrapAddonsModule]}]}],o}();o.FormlyBootstrapModule=x,o.FormlyFieldCheckbox=u,o.FormlyFieldMultiCheckbox=d,o.FormlyFieldInput=h,o.FormlyFieldRadio=g,o.FormlyFieldTextArea=y,o.FormlyFieldSelect=b,o.FormlyWrapperFormField=C,o.ɵb=k,o.ɵa=v,Object.defineProperty(o,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-bootstrap.umd.min.js.map