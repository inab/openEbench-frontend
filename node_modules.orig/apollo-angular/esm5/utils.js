import { observeOn } from 'rxjs/operators';
import { Observable, queueScheduler, observable, } from 'rxjs';
export function fromPromise(promiseFn) {
    return new Observable(function (subscriber) {
        promiseFn().then(function (result) {
            if (!subscriber.closed) {
                subscriber.next(result);
                subscriber.complete();
            }
        }, function (error) {
            if (!subscriber.closed) {
                subscriber.error(error);
            }
        });
        return function () { return subscriber.unsubscribe(); };
    });
}
var ZoneScheduler = /** @class */ (function () {
    function ZoneScheduler(zone) {
        this.zone = zone;
        this.now = Date.now ? Date.now : function () { return +new Date(); };
    }
    ZoneScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return this.zone.run(function () {
            return queueScheduler.schedule(work, delay, state);
        });
    };
    return ZoneScheduler;
}());
export { ZoneScheduler };
// XXX: Apollo's QueryObservable is not compatible with RxJS
// TODO: remove it in one of future releases
// https://github.com/ReactiveX/rxjs/blob/9fb0ce9e09c865920cf37915cc675e3b3a75050b/src/internal/util/subscribeTo.ts#L32
export function fixObservable(obs) {
    obs[observable] = function () { return obs; };
    return obs;
}
export function wrapWithZone(obs, ngZone) {
    return obs.pipe(observeOn(new ZoneScheduler(ngZone)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci8iLCJzb3VyY2VzIjpbInV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsVUFBVSxFQUVWLGNBQWMsRUFHZCxVQUFVLEdBQ1gsTUFBTSxNQUFNLENBQUM7QUFFZCxNQUFNLFVBQVUsV0FBVyxDQUFJLFNBQTJCO0lBQ3hELE9BQU8sSUFBSSxVQUFVLENBQUksVUFBQSxVQUFVO1FBQ2pDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FDZCxVQUFBLE1BQU07WUFDSixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQyxFQUNELFVBQUEsS0FBSztZQUNILElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUN0QixVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUNGLENBQUM7UUFFRixPQUFPLGNBQU0sT0FBQSxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQXhCLENBQXdCLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7SUFDRSx1QkFBb0IsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7UUFFekIsUUFBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGNBQU0sT0FBQSxDQUFDLElBQUksSUFBSSxFQUFFLEVBQVgsQ0FBVyxDQUFDO0lBRmxCLENBQUM7SUFJN0IsZ0NBQVEsR0FBZixVQUNFLElBQW1ELEVBQ25ELEtBQWlCLEVBQ2pCLEtBQVM7UUFEVCxzQkFBQSxFQUFBLFNBQWlCO1FBR2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDbkIsT0FBQSxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO1FBQTNDLENBQTJDLENBQzVCLENBQUM7SUFDcEIsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQWRELElBY0M7O0FBRUQsNERBQTREO0FBQzVELDRDQUE0QztBQUM1Qyx1SEFBdUg7QUFDdkgsTUFBTSxVQUFVLGFBQWEsQ0FBSSxHQUFNO0lBQ3BDLEdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxjQUFNLE9BQUEsR0FBRyxFQUFILENBQUcsQ0FBQztJQUNyQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUMxQixHQUFrQixFQUNsQixNQUFjO0lBRWQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7b2JzZXJ2ZU9ufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBPYnNlcnZhYmxlLFxuICBTdWJzY3JpcHRpb24sXG4gIHF1ZXVlU2NoZWR1bGVyLFxuICBTY2hlZHVsZXJMaWtlLFxuICBTY2hlZHVsZXJBY3Rpb24sXG4gIG9ic2VydmFibGUsXG59IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2U8VD4ocHJvbWlzZUZuOiAoKSA9PiBQcm9taXNlPFQ+KTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxUPihzdWJzY3JpYmVyID0+IHtcbiAgICBwcm9taXNlRm4oKS50aGVuKFxuICAgICAgcmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQpO1xuICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVycm9yID0+IHtcbiAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICB9KTtcbn1cblxuZXhwb3J0IGNsYXNzIFpvbmVTY2hlZHVsZXIgaW1wbGVtZW50cyBTY2hlZHVsZXJMaWtlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB6b25lOiBOZ1pvbmUpIHt9XG5cbiAgcHVibGljIG5vdyA9IERhdGUubm93ID8gRGF0ZS5ub3cgOiAoKSA9PiArbmV3IERhdGUoKTtcblxuICBwdWJsaWMgc2NoZWR1bGU8VD4oXG4gICAgd29yazogKHRoaXM6IFNjaGVkdWxlckFjdGlvbjxUPiwgc3RhdGU/OiBUKSA9PiB2b2lkLFxuICAgIGRlbGF5OiBudW1iZXIgPSAwLFxuICAgIHN0YXRlPzogVCxcbiAgKTogU3Vic2NyaXB0aW9uIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnJ1bigoKSA9PlxuICAgICAgcXVldWVTY2hlZHVsZXIuc2NoZWR1bGUod29yaywgZGVsYXksIHN0YXRlKSxcbiAgICApIGFzIFN1YnNjcmlwdGlvbjtcbiAgfVxufVxuXG4vLyBYWFg6IEFwb2xsbydzIFF1ZXJ5T2JzZXJ2YWJsZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIFJ4SlNcbi8vIFRPRE86IHJlbW92ZSBpdCBpbiBvbmUgb2YgZnV0dXJlIHJlbGVhc2VzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RpdmVYL3J4anMvYmxvYi85ZmIwY2U5ZTA5Yzg2NTkyMGNmMzc5MTVjYzY3NWUzYjNhNzUwNTBiL3NyYy9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvLnRzI0wzMlxuZXhwb3J0IGZ1bmN0aW9uIGZpeE9ic2VydmFibGU8VD4ob2JzOiBUKTogVCB7XG4gIChvYnMgYXMgYW55KVtvYnNlcnZhYmxlXSA9ICgpID0+IG9icztcbiAgcmV0dXJuIG9icztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBXaXRoWm9uZTxUPihcbiAgb2JzOiBPYnNlcnZhYmxlPFQ+LFxuICBuZ1pvbmU6IE5nWm9uZSxcbik6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gb2JzLnBpcGUob2JzZXJ2ZU9uKG5ldyBab25lU2NoZWR1bGVyKG5nWm9uZSkpKTtcbn1cbiJdfQ==