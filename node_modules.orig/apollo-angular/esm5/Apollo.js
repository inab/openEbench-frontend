import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject, NgZone } from '@angular/core';
import { ApolloClient, } from 'apollo-client';
import { from } from 'rxjs';
import { QueryRef } from './QueryRef';
import { APOLLO_OPTIONS, APOLLO_NAMED_OPTIONS } from './tokens';
import { fromPromise, wrapWithZone, fixObservable } from './utils';
var ApolloBase = /** @class */ (function () {
    function ApolloBase(ngZone, _client) {
        this.ngZone = ngZone;
        this._client = _client;
    }
    ApolloBase.prototype.watchQuery = function (options) {
        return new QueryRef(this.client.watchQuery(tslib_1.__assign({}, options)), this.ngZone, options);
    };
    ApolloBase.prototype.query = function (options) {
        var _this = this;
        return fromPromise(function () {
            return _this.client.query(tslib_1.__assign({}, options));
        });
    };
    ApolloBase.prototype.mutate = function (options) {
        var _this = this;
        return fromPromise(function () {
            return _this.client.mutate(tslib_1.__assign({}, options));
        });
    };
    ApolloBase.prototype.subscribe = function (options, extra) {
        var obs = from(fixObservable(this.client.subscribe(tslib_1.__assign({}, options))));
        return extra && extra.useZone !== true
            ? obs
            : wrapWithZone(obs, this.ngZone);
    };
    /**
     * Get an access to an instance of ApolloClient
     */
    ApolloBase.prototype.getClient = function () {
        return this._client;
    };
    /**
     * Set a new instance of ApolloClient
     * Remember to clean up the store before setting a new client.
     *
     * @param client ApolloClient instance
     */
    ApolloBase.prototype.setClient = function (client) {
        if (this._client) {
            throw new Error('Client has been already defined');
        }
        this._client = client;
    };
    Object.defineProperty(ApolloBase.prototype, "client", {
        get: function () {
            this.beforeEach();
            return this._client;
        },
        enumerable: true,
        configurable: true
    });
    ApolloBase.prototype.beforeEach = function () {
        this.checkInstance();
    };
    ApolloBase.prototype.checkInstance = function () {
        if (!this._client) {
            throw new Error('Client has not been defined yet');
        }
    };
    return ApolloBase;
}());
export { ApolloBase };
var Apollo = /** @class */ (function (_super) {
    tslib_1.__extends(Apollo, _super);
    function Apollo(_ngZone, apolloOptions, apolloNamedOptions) {
        var _this = _super.call(this, _ngZone) || this;
        _this._ngZone = _ngZone;
        _this.map = new Map();
        if (apolloOptions) {
            _this.createDefault(apolloOptions);
        }
        if (apolloNamedOptions && typeof apolloNamedOptions === 'object') {
            for (var name_1 in apolloNamedOptions) {
                if (apolloNamedOptions.hasOwnProperty(name_1)) {
                    var options = apolloNamedOptions[name_1];
                    _this.createNamed(name_1, options);
                }
            }
        }
        return _this;
    }
    /**
     * Create an instance of ApolloClient
     * @param options Options required to create ApolloClient
     * @param name client's name
     */
    Apollo.prototype.create = function (options, name) {
        if (isDefault(name)) {
            this.createDefault(options);
        }
        else {
            this.createNamed(name, options);
        }
    };
    /**
     * Use a default ApolloClient
     */
    Apollo.prototype.default = function () {
        return this;
    };
    /**
     * Use a named ApolloClient
     * @param name client's name
     */
    Apollo.prototype.use = function (name) {
        if (isDefault(name)) {
            return this.default();
        }
        return this.map.get(name);
    };
    /**
     * Create a default ApolloClient, same as `apollo.create(options)`
     * @param options ApolloClient's options
     */
    Apollo.prototype.createDefault = function (options) {
        if (this.getClient()) {
            throw new Error('Apollo has been already created.');
        }
        return this.setClient(new ApolloClient(options));
    };
    /**
     * Create a named ApolloClient, same as `apollo.create(options, name)`
     * @param name client's name
     * @param options ApolloClient's options
     */
    Apollo.prototype.createNamed = function (name, options) {
        if (this.map.has(name)) {
            throw new Error("Client " + name + " has been already created");
        }
        this.map.set(name, new ApolloBase(this._ngZone, new ApolloClient(options)));
    };
    /**
     * Remember to clean up the store before removing a client
     * @param name client's name
     */
    Apollo.prototype.removeClient = function (name) {
        if (isDefault(name)) {
            this._client = undefined;
        }
        else {
            this.map.delete(name);
        }
    };
    Apollo.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_NAMED_OPTIONS,] }] }
    ]; };
    Apollo = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(1, Optional()),
        tslib_1.__param(1, Inject(APOLLO_OPTIONS)),
        tslib_1.__param(2, Optional()),
        tslib_1.__param(2, Inject(APOLLO_NAMED_OPTIONS))
    ], Apollo);
    return Apollo;
}(ApolloBase));
export { Apollo };
function isDefault(name) {
    return !name || name === 'default';
}
//# sourceMappingURL=data:application/json;base64,