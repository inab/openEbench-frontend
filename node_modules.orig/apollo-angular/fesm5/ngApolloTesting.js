import { __decorate, __param } from 'tslib';
import { Apollo, ApolloModule } from 'apollo-angular';
import { Observable, ApolloLink } from 'apollo-link';
import { InMemoryCache } from 'apollo-cache-inmemory';
import { ApolloCache } from 'apollo-cache';
import { Injectable, InjectionToken, Optional, Inject, NgModule } from '@angular/core';
import { print } from 'graphql';
import { ApolloError } from 'apollo-client';

/**
 * Controller to be injected into tests, that allows for mocking and flushing
 * of operations.
 *
 *
 */
var ApolloTestingController = /** @class */ (function () {
    function ApolloTestingController() {
    }
    return ApolloTestingController;
}());

var isApolloError = function (err) {
    return err && err.hasOwnProperty('graphQLErrors');
};
var Éµ0 = isApolloError;
var TestOperation = /** @class */ (function () {
    function TestOperation(operation, observer) {
        this.operation = operation;
        this.observer = observer;
    }
    TestOperation.prototype.flush = function (result) {
        if (isApolloError(result)) {
            this.observer.error(result);
        }
        else {
            this.observer.next(result);
            this.observer.complete();
        }
    };
    TestOperation.prototype.networkError = function (error) {
        var apolloError = new ApolloError({
            networkError: error,
        });
        this.flush(apolloError);
    };
    TestOperation.prototype.graphqlErrors = function (errors) {
        this.flush({
            errors: errors,
        });
    };
    return TestOperation;
}());

/**
 * A testing backend for `Apollo`.
 *
 * `ApolloTestingBackend` works by keeping a list of all open operations.
 * As operations come in, they're added to the list. Users can assert that specific
 * operations were made and then flush them. In the end, a verify() method asserts
 * that no unexpected operations were made.
 */
var ApolloTestingBackend = /** @class */ (function () {
    function ApolloTestingBackend() {
        /**
         * List of pending operations which have not yet been expected.
         */
        this.open = [];
    }
    /**
     * Handle an incoming operation by queueing it in the list of open operations.
     */
    ApolloTestingBackend.prototype.handle = function (op) {
        var _this = this;
        return new Observable(function (observer) {
            var testOp = new TestOperation(op, observer);
            _this.open.push(testOp);
        });
    };
    /**
     * Helper function to search for operations in the list of open operations.
     */
    ApolloTestingBackend.prototype._match = function (match) {
        var _this = this;
        if (typeof match === 'string') {
            return this.open.filter(function (testOp) { return testOp.operation.operationName === match; });
        }
        else if (typeof match === 'function') {
            return this.open.filter(function (testOp) { return match(testOp.operation); });
        }
        else {
            if (this.isDocumentNode(match)) {
                return this.open.filter(function (testOp) { return print(testOp.operation.query) === print(match); });
            }
            return this.open.filter(function (testOp) { return _this.matchOp(match, testOp); });
        }
    };
    ApolloTestingBackend.prototype.matchOp = function (match, testOp) {
        var variables = JSON.stringify(match.variables);
        var extensions = JSON.stringify(match.extensions);
        var sameName = this.compare(match.operationName, testOp.operation.operationName);
        var sameVariables = this.compare(variables, testOp.operation.variables);
        var sameQuery = print(testOp.operation.query) === print(match.query);
        var sameExtensions = this.compare(extensions, testOp.operation.extensions);
        return sameName && sameVariables && sameQuery && sameExtensions;
    };
    ApolloTestingBackend.prototype.compare = function (expected, value) {
        var prepare = function (val) {
            return typeof val === 'string' ? val : JSON.stringify(val);
        };
        var received = prepare(value);
        return !expected || received === expected;
    };
    /**
     * Search for operations in the list of open operations, and return all that match
     * without asserting anything about the number of matches.
     */
    ApolloTestingBackend.prototype.match = function (match) {
        var _this = this;
        var results = this._match(match);
        results.forEach(function (result) {
            var index = _this.open.indexOf(result);
            if (index !== -1) {
                _this.open.splice(index, 1);
            }
        });
        return results;
    };
    /**
     * Expect that a single outstanding request matches the given matcher, and return
     * it.
     *
     * operations returned through this API will no longer be in the list of open operations,
     * and thus will not match twice.
     */
    ApolloTestingBackend.prototype.expectOne = function (match, description) {
        description = description || this.descriptionFromMatcher(match);
        var matches = this.match(match);
        if (matches.length > 1) {
            throw new Error("Expected one matching operation for criteria \"" + description + "\", found " + matches.length + " operations.");
        }
        if (matches.length === 0) {
            throw new Error("Expected one matching operation for criteria \"" + description + "\", found none.");
        }
        return matches[0];
    };
    /**
     * Expect that no outstanding operations match the given matcher, and throw an error
     * if any do.
     */
    ApolloTestingBackend.prototype.expectNone = function (match, description) {
        description = description || this.descriptionFromMatcher(match);
        var matches = this.match(match);
        if (matches.length > 0) {
            throw new Error("Expected zero matching operations for criteria \"" + description + "\", found " + matches.length + ".");
        }
    };
    /**
     * Validate that there are no outstanding operations.
     */
    ApolloTestingBackend.prototype.verify = function () {
        var open = this.open;
        if (open.length > 0) {
            // Show the methods and URLs of open operations in the error, for convenience.
            var operations = open
                .map(function (testOp) { return testOp.operation.operationName; })
                .join(', ');
            throw new Error("Expected no open operations, found " + open.length + ": " + operations);
        }
    };
    ApolloTestingBackend.prototype.isDocumentNode = function (docOrOp) {
        return !docOrOp.operationName;
    };
    ApolloTestingBackend.prototype.descriptionFromMatcher = function (matcher) {
        if (typeof matcher === 'string') {
            return "Match operationName: " + matcher;
        }
        else if (typeof matcher === 'object') {
            if (this.isDocumentNode(matcher)) {
                return "Match DocumentNode";
            }
            var name_1 = matcher.operationName || '(any)';
            var variables = JSON.stringify(matcher.variables) || '(any)';
            return "Match operation: " + name_1 + ", variables: " + variables;
        }
        else {
            return "Match by function: " + matcher.name;
        }
    };
    ApolloTestingBackend = __decorate([
        Injectable()
    ], ApolloTestingBackend);
    return ApolloTestingBackend;
}());

var APOLLO_TESTING_CACHE = new InjectionToken('apollo-angular/testing cache');
var APOLLO_TESTING_NAMED_CACHE = new InjectionToken('apollo-angular/testing named cache');
var APOLLO_TESTING_CLIENTS = new InjectionToken('apollo-angular/testing named clients');
function addClient(name, op) {
    op.clientName = name;
    return op;
}
var ApolloTestingModuleCore = /** @class */ (function () {
    function ApolloTestingModuleCore(apollo, backend, namedClients, cache, namedCaches) {
        function createOptions(name, c) {
            return {
                link: new ApolloLink(function (operation) {
                    return backend.handle(addClient(name, operation));
                }),
                cache: c ||
                    new InMemoryCache({
                        addTypename: false,
                    }),
            };
        }
        apollo.create(createOptions('default', cache));
        if (namedClients && namedClients.length) {
            namedClients.forEach(function (name) {
                var caches = namedCaches && typeof namedCaches === 'object' ? namedCaches : {};
                apollo.createNamed(name, createOptions(name, caches[name]));
            });
        }
    }
    ApolloTestingModuleCore.ctorParameters = function () { return [
        { type: Apollo },
        { type: ApolloTestingBackend },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CLIENTS,] }] },
        { type: ApolloCache, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CACHE,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_NAMED_CACHE,] }] }
    ]; };
    ApolloTestingModuleCore = __decorate([
        NgModule({
            imports: [ApolloModule],
            providers: [
                ApolloTestingBackend,
                { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
            ],
        }),
        __param(2, Optional()),
        __param(2, Inject(APOLLO_TESTING_CLIENTS)),
        __param(3, Optional()),
        __param(3, Inject(APOLLO_TESTING_CACHE)),
        __param(4, Optional()),
        __param(4, Inject(APOLLO_TESTING_NAMED_CACHE))
    ], ApolloTestingModuleCore);
    return ApolloTestingModuleCore;
}());
var ApolloTestingModule = /** @class */ (function () {
    function ApolloTestingModule() {
    }
    ApolloTestingModule.withClients = function (names) {
        return {
            ngModule: ApolloTestingModuleCore,
            providers: [
                {
                    provide: APOLLO_TESTING_CLIENTS,
                    useValue: names,
                },
            ],
        };
    };
    ApolloTestingModule = __decorate([
        NgModule({
            imports: [ApolloTestingModuleCore],
        })
    ], ApolloTestingModule);
    return ApolloTestingModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { APOLLO_TESTING_CACHE, APOLLO_TESTING_NAMED_CACHE, ApolloTestingController, ApolloTestingModule, TestOperation, APOLLO_TESTING_CLIENTS as Éµa, ApolloTestingModuleCore as Éµb, ApolloTestingBackend as Éµc };
//# sourceMappingURL=ngApolloTesting.js.map
