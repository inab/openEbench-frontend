import { NgZone } from '@angular/core';
import { ApolloQueryResult, ObservableQuery, ApolloError, FetchMoreQueryOptions, FetchMoreOptions, SubscribeToMoreOptions, UpdateQueryOptions, ApolloCurrentResult } from 'apollo-client';
import { Observable } from 'rxjs';
import { WatchQueryOptions, R } from './types';
export declare class QueryRef<T, V = R> {
    private obsQuery;
    valueChanges: Observable<ApolloQueryResult<T>>;
    options: ObservableQuery<T, V>['options'];
    queryId: ObservableQuery<T, V>['queryId'];
    variables: V;
    constructor(obsQuery: ObservableQuery<T, V>, ngZone: NgZone, options: WatchQueryOptions<V>);
    result(): Promise<ApolloQueryResult<T>>;
    currentResult(): ApolloCurrentResult<T>;
    getLastResult(): ApolloQueryResult<T>;
    getLastError(): ApolloError;
    resetLastResults(): void;
    refetch(variables?: V): Promise<ApolloQueryResult<T>>;
    fetchMore<K extends keyof V>(fetchMoreOptions: FetchMoreQueryOptions<V, K> & FetchMoreOptions<T, V>): Promise<ApolloQueryResult<T>>;
    subscribeToMore<MT = any, MV = R>(options: SubscribeToMoreOptions<T, MV, MT>): () => void;
    updateQuery(mapFn: (previousQueryResult: T, options: UpdateQueryOptions<V>) => T): void;
    stopPolling(): void;
    startPolling(pollInterval: number): void;
    setOptions(opts: any): Promise<void | ApolloQueryResult<T>>;
    setVariables(variables: V, tryFetch?: boolean, fetchResults?: boolean): Promise<void | ApolloQueryResult<T>>;
}
