{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://apollo-angular/testing/controller.ts","ng://apollo-angular/testing/operation.ts","ng://apollo-angular/testing/backend.ts","ng://apollo-angular/testing/module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","ApolloTestingController","isApolloError","err","hasOwnProperty","TestOperation","operation","observer","this","prototype","flush","result","error","next","complete","networkError","apolloError","ApolloError","graphqlErrors","errors","ApolloTestingBackend","open","handle","op","_this","LinkObservable","testOp","push","_match","match","filter","operationName","isDocumentNode","print","query","matchOp","variables","JSON","stringify","extensions","sameName","compare","sameVariables","sameQuery","sameExtensions","expected","value","val","received","results","forEach","index","indexOf","splice","expectOne","description","descriptionFromMatcher","matches","Error","expectNone","verify","operations","map","join","docOrOp","matcher","name","Injectable","APOLLO_TESTING_CACHE","InjectionToken","APOLLO_TESTING_NAMED_CACHE","APOLLO_TESTING_CLIENTS","ApolloTestingModuleCore","apollo","backend","namedClients","cache","namedCaches","createOptions","link","ApolloLink","clientName","addClient","InMemoryCache","addTypename","create","caches","createNamed","Apollo","Optional","type","Inject","args","ApolloCache","NgModule","imports","ApolloModule","providers","provide","useExisting","tslib_1.__param","ApolloTestingModule","withClients","names","ngModule","useValue"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {DocumentNode} from 'graphql';\n\nimport {TestOperation, Operation} from './operation';\n\nexport type MatchOperationFn = (op: Operation) => boolean;\nexport type MatchOperation =\n  | string\n  | DocumentNode\n  | Operation\n  | MatchOperationFn;\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of operations.\n *\n *\n */\nexport abstract class ApolloTestingController {\n  /**\n   * Search for operations that match the given parameter, without any expectations.\n   */\n  public abstract match(match: MatchOperation): TestOperation[];\n\n  /**\n   * Expect that a single  has been made which matches the given URL, and return its\n   * mock.\n   *\n   * If no such  has been made, or more than one such  has been made, fail with an\n   * error message including the given  description, if any.\n   */\n  public abstract expectOne(\n    operationName: string,\n    description?: string,\n  ): TestOperation;\n\n  /**\n   * Expect that a single  has been made which matches the given parameters, and return\n   * its mock.\n   *\n   * If no such  has been made, or more than one such  has been made, fail with an\n   * error message including the given  description, if any.\n   */\n  public abstract expectOne(op: Operation, description?: string): TestOperation;\n\n  /**\n   * Expect that a single  has been made which matches the given predicate function, and\n   * return its mock.\n   *\n   * If no such  has been made, or more than one such  has been made, fail with an\n   * error message including the given  description, if any.\n   */\n  public abstract expectOne(\n    matchFn: MatchOperationFn,\n    description?: string,\n  ): TestOperation;\n\n  /**\n   * Expect that a single  has been made which matches the given condition, and return\n   * its mock.\n   *\n   * If no such  has been made, or more than one such  has been made, fail with an\n   * error message including the given  description, if any.\n   */\n  public abstract expectOne(\n    match: MatchOperation,\n    description?: string,\n  ): TestOperation;\n\n  /**\n   * Expect that no operations have been made which match the given URL.\n   *\n   * If a matching  has been made, fail with an error message including the given\n   * description, if any.\n   */\n  public abstract expectNone(operationName: string, description?: string): void;\n\n  /**\n   * Expect that no operations have been made which match the given parameters.\n   *\n   * If a matching  has been made, fail with an error message including the given\n   * description, if any.\n   */\n  public abstract expectNone(op: Operation, description?: string): void;\n\n  /**\n   * Expect that no operations have been made which match the given predicate function.\n   *\n   * If a matching  has been made, fail with an error message including the given\n   * description, if any.\n   */\n  public abstract expectNone(\n    matchFn: MatchOperationFn,\n    description?: string,\n  ): void;\n\n  /**\n   * Expect that no operations have been made which match the given condition.\n   *\n   * If a matching  has been made, fail with an error message including the given\n   * description, if any.\n   */\n  public abstract expectNone(match: MatchOperation, description?: string): void;\n\n  /**\n   * Verify that no unmatched operations are outstanding.\n   *\n   * If any operations are outstanding, fail with an error message indicating which operations were not\n   * handled.\n   */\n  public abstract verify(): void;\n}\n","import {ApolloError} from 'apollo-client';\nimport {Operation as LinkOperation, FetchResult} from 'apollo-link';\nimport {GraphQLError, ExecutionResult} from 'graphql';\nimport {Observer} from 'rxjs';\n\nconst isApolloError = (err: any): err is ApolloError =>\n  err && err.hasOwnProperty('graphQLErrors');\n\nexport type Operation = LinkOperation & {\n  clientName: string;\n};\n\nexport class TestOperation {\n  constructor(\n    public operation: Operation,\n    private observer: Observer<FetchResult>,\n  ) {}\n\n  public flush(result: ExecutionResult | ApolloError): void {\n    if (isApolloError(result)) {\n      this.observer.error(result);\n    } else {\n      this.observer.next(result as FetchResult);\n      this.observer.complete();\n    }\n  }\n\n  public networkError(error: Error): void {\n    const apolloError = new ApolloError({\n      networkError: error,\n    });\n\n    this.flush(apolloError);\n  }\n\n  public graphqlErrors(errors: GraphQLError[]): void {\n    this.flush({\n      errors,\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Observer} from 'rxjs';\nimport {FetchResult, Observable as LinkObservable} from 'apollo-link';\nimport {DocumentNode} from 'graphql';\nimport {print} from 'graphql';\n\nimport {ApolloTestingController, MatchOperation} from './controller';\nimport {TestOperation, Operation} from './operation';\n\n/**\n * A testing backend for `Apollo`.\n *\n * `ApolloTestingBackend` works by keeping a list of all open operations.\n * As operations come in, they're added to the list. Users can assert that specific\n * operations were made and then flush them. In the end, a verify() method asserts\n * that no unexpected operations were made.\n */\n@Injectable()\nexport class ApolloTestingBackend implements ApolloTestingController {\n  /**\n   * List of pending operations which have not yet been expected.\n   */\n  private open: TestOperation[] = [];\n\n  /**\n   * Handle an incoming operation by queueing it in the list of open operations.\n   */\n  public handle(op: Operation): LinkObservable<FetchResult> {\n    return new LinkObservable((observer: Observer<any>) => {\n      const testOp = new TestOperation(op, observer);\n      this.open.push(testOp);\n    });\n  }\n\n  /**\n   * Helper function to search for operations in the list of open operations.\n   */\n  private _match(match: MatchOperation): TestOperation[] {\n    if (typeof match === 'string') {\n      return this.open.filter(\n        testOp => testOp.operation.operationName === match,\n      );\n    } else if (typeof match === 'function') {\n      return this.open.filter(testOp => match(testOp.operation));\n    } else {\n      if (this.isDocumentNode(match)) {\n        return this.open.filter(\n          testOp => print(testOp.operation.query) === print(match),\n        );\n      }\n\n      return this.open.filter(testOp => this.matchOp(match, testOp));\n    }\n  }\n\n  private matchOp(match: Operation, testOp: TestOperation): boolean {\n    const variables = JSON.stringify(match.variables);\n    const extensions = JSON.stringify(match.extensions);\n\n    const sameName = this.compare(\n      match.operationName,\n      testOp.operation.operationName,\n    );\n    const sameVariables = this.compare(variables, testOp.operation.variables);\n\n    const sameQuery = print(testOp.operation.query) === print(match.query);\n\n    const sameExtensions = this.compare(\n      extensions,\n      testOp.operation.extensions,\n    );\n\n    return sameName && sameVariables && sameQuery && sameExtensions;\n  }\n\n  private compare(expected?: string, value?: Object | string): boolean {\n    const prepare = (val: any) =>\n      typeof val === 'string' ? val : JSON.stringify(val);\n    const received = prepare(value);\n\n    return !expected || received === expected;\n  }\n\n  /**\n   * Search for operations in the list of open operations, and return all that match\n   * without asserting anything about the number of matches.\n   */\n  public match(match: MatchOperation): TestOperation[] {\n    const results = this._match(match);\n\n    results.forEach(result => {\n      const index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * Expect that a single outstanding request matches the given matcher, and return\n   * it.\n   *\n   * operations returned through this API will no longer be in the list of open operations,\n   * and thus will not match twice.\n   */\n  public expectOne(match: MatchOperation, description?: string): TestOperation {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(\n        `Expected one matching operation for criteria \"${description}\", found ${matches.length} operations.`,\n      );\n    }\n    if (matches.length === 0) {\n      throw new Error(\n        `Expected one matching operation for criteria \"${description}\", found none.`,\n      );\n    }\n    return matches[0];\n  }\n\n  /**\n   * Expect that no outstanding operations match the given matcher, and throw an error\n   * if any do.\n   */\n  public expectNone(match: MatchOperation, description?: string): void {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(\n        `Expected zero matching operations for criteria \"${description}\", found ${matches.length}.`,\n      );\n    }\n  }\n\n  /**\n   * Validate that there are no outstanding operations.\n   */\n  public verify(): void {\n    const open = this.open;\n\n    if (open.length > 0) {\n      // Show the methods and URLs of open operations in the error, for convenience.\n      const operations = open\n        .map(testOp => testOp.operation.operationName)\n        .join(', ');\n      throw new Error(\n        `Expected no open operations, found ${open.length}: ${operations}`,\n      );\n    }\n  }\n\n  private isDocumentNode(\n    docOrOp: DocumentNode | Operation,\n  ): docOrOp is DocumentNode {\n    return !(docOrOp as Operation).operationName;\n  }\n\n  private descriptionFromMatcher(matcher: MatchOperation): string {\n    if (typeof matcher === 'string') {\n      return `Match operationName: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      if (this.isDocumentNode(matcher)) {\n        return `Match DocumentNode`;\n      }\n\n      const name = matcher.operationName || '(any)';\n      const variables = JSON.stringify(matcher.variables) || '(any)';\n\n      return `Match operation: ${name}, variables: ${variables}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\n}\n","import {ApolloModule, Apollo} from 'apollo-angular';\nimport {ApolloLink, Operation as LinkOperation} from 'apollo-link';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {ApolloCache} from 'apollo-cache';\nimport {\n  NgModule,\n  InjectionToken,\n  Inject,\n  Optional,\n  ModuleWithProviders,\n} from '@angular/core';\n\nimport {ApolloTestingController} from './controller';\nimport {ApolloTestingBackend} from './backend';\nimport {Operation} from './operation';\n\nexport type NamedCaches = Record<string, ApolloCache<any> | undefined | null>;\n\nexport const APOLLO_TESTING_CACHE = new InjectionToken<ApolloCache<any>>(\n  'apollo-angular/testing cache',\n);\n\nexport const APOLLO_TESTING_NAMED_CACHE = new InjectionToken<NamedCaches>(\n  'apollo-angular/testing named cache',\n);\n\nexport const APOLLO_TESTING_CLIENTS = new InjectionToken<string[]>(\n  'apollo-angular/testing named clients',\n);\n\nfunction addClient(name: string, op: LinkOperation): Operation {\n  (op as Operation).clientName = name;\n\n  return op as Operation;\n}\n\n@NgModule({\n  imports: [ApolloModule],\n  providers: [\n    ApolloTestingBackend,\n    {provide: ApolloTestingController, useExisting: ApolloTestingBackend},\n  ],\n})\nexport class ApolloTestingModuleCore {\n  constructor(\n    apollo: Apollo,\n    backend: ApolloTestingBackend,\n    @Optional()\n    @Inject(APOLLO_TESTING_CLIENTS)\n    namedClients?: string[],\n    @Optional()\n    @Inject(APOLLO_TESTING_CACHE)\n    cache?: ApolloCache<any>,\n    @Optional()\n    @Inject(APOLLO_TESTING_NAMED_CACHE)\n    namedCaches?: any, // FIX: using NamedCaches here makes ngc fail\n  ) {\n    function createOptions(name: string, c?: ApolloCache<any> | null) {\n      return {\n        link: new ApolloLink(operation =>\n          backend.handle(addClient(name, operation)),\n        ),\n        cache:\n          c ||\n          new InMemoryCache({\n            addTypename: false,\n          }),\n      };\n    }\n\n    apollo.create(createOptions('default', cache));\n\n    if (namedClients && namedClients.length) {\n      namedClients.forEach(name => {\n        const caches =\n          namedCaches && typeof namedCaches === 'object' ? namedCaches : {};\n\n        apollo.createNamed(name, createOptions(name, caches[name]));\n      });\n    }\n  }\n}\n\n@NgModule({\n  imports: [ApolloTestingModuleCore],\n})\nexport class ApolloTestingModule {\n  static withClients(names: string[]): ModuleWithProviders {\n    return {\n      ngModule: ApolloTestingModuleCore,\n      providers: [\n        {\n          provide: APOLLO_TESTING_CLIENTS,\n          useValue: names,\n        },\n      ],\n    };\n  }\n}\n"]}