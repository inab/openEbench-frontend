(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('apollo-angular'), require('apollo-link'), require('apollo-cache-inmemory'), require('apollo-cache'), require('@angular/core'), require('graphql'), require('apollo-client')) :
    typeof define === 'function' && define.amd ? define('apollo-angular/testing', ['exports', 'apollo-angular', 'apollo-link', 'apollo-cache-inmemory', 'apollo-cache', '@angular/core', 'graphql', 'apollo-client'], factory) :
    (global = global || self, factory((global['apollo-angular'] = global['apollo-angular'] || {}, global['apollo-angular'].testing = {}), global['apollo-angular'], global.apolloLink.core, global.apollo.cache.inmemory, global.apolloCache, global.ng.core, global.graphql, global.apollo));
}(this, function (exports, apolloAngular, apolloLink, apolloCacheInmemory, apolloCache, core, graphql, apolloClient) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * Controller to be injected into tests, that allows for mocking and flushing
     * of operations.
     *
     *
     */
    var ApolloTestingController = /** @class */ (function () {
        function ApolloTestingController() {
        }
        return ApolloTestingController;
    }());

    var isApolloError = function (err) {
        return err && err.hasOwnProperty('graphQLErrors');
    };
    var ɵ0 = isApolloError;
    var TestOperation = /** @class */ (function () {
        function TestOperation(operation, observer) {
            this.operation = operation;
            this.observer = observer;
        }
        TestOperation.prototype.flush = function (result) {
            if (isApolloError(result)) {
                this.observer.error(result);
            }
            else {
                this.observer.next(result);
                this.observer.complete();
            }
        };
        TestOperation.prototype.networkError = function (error) {
            var apolloError = new apolloClient.ApolloError({
                networkError: error,
            });
            this.flush(apolloError);
        };
        TestOperation.prototype.graphqlErrors = function (errors) {
            this.flush({
                errors: errors,
            });
        };
        return TestOperation;
    }());

    /**
     * A testing backend for `Apollo`.
     *
     * `ApolloTestingBackend` works by keeping a list of all open operations.
     * As operations come in, they're added to the list. Users can assert that specific
     * operations were made and then flush them. In the end, a verify() method asserts
     * that no unexpected operations were made.
     */
    var ApolloTestingBackend = /** @class */ (function () {
        function ApolloTestingBackend() {
            /**
             * List of pending operations which have not yet been expected.
             */
            this.open = [];
        }
        /**
         * Handle an incoming operation by queueing it in the list of open operations.
         */
        ApolloTestingBackend.prototype.handle = function (op) {
            var _this = this;
            return new apolloLink.Observable(function (observer) {
                var testOp = new TestOperation(op, observer);
                _this.open.push(testOp);
            });
        };
        /**
         * Helper function to search for operations in the list of open operations.
         */
        ApolloTestingBackend.prototype._match = function (match) {
            var _this = this;
            if (typeof match === 'string') {
                return this.open.filter(function (testOp) { return testOp.operation.operationName === match; });
            }
            else if (typeof match === 'function') {
                return this.open.filter(function (testOp) { return match(testOp.operation); });
            }
            else {
                if (this.isDocumentNode(match)) {
                    return this.open.filter(function (testOp) { return graphql.print(testOp.operation.query) === graphql.print(match); });
                }
                return this.open.filter(function (testOp) { return _this.matchOp(match, testOp); });
            }
        };
        ApolloTestingBackend.prototype.matchOp = function (match, testOp) {
            var variables = JSON.stringify(match.variables);
            var extensions = JSON.stringify(match.extensions);
            var sameName = this.compare(match.operationName, testOp.operation.operationName);
            var sameVariables = this.compare(variables, testOp.operation.variables);
            var sameQuery = graphql.print(testOp.operation.query) === graphql.print(match.query);
            var sameExtensions = this.compare(extensions, testOp.operation.extensions);
            return sameName && sameVariables && sameQuery && sameExtensions;
        };
        ApolloTestingBackend.prototype.compare = function (expected, value) {
            var prepare = function (val) {
                return typeof val === 'string' ? val : JSON.stringify(val);
            };
            var received = prepare(value);
            return !expected || received === expected;
        };
        /**
         * Search for operations in the list of open operations, and return all that match
         * without asserting anything about the number of matches.
         */
        ApolloTestingBackend.prototype.match = function (match) {
            var _this = this;
            var results = this._match(match);
            results.forEach(function (result) {
                var index = _this.open.indexOf(result);
                if (index !== -1) {
                    _this.open.splice(index, 1);
                }
            });
            return results;
        };
        /**
         * Expect that a single outstanding request matches the given matcher, and return
         * it.
         *
         * operations returned through this API will no longer be in the list of open operations,
         * and thus will not match twice.
         */
        ApolloTestingBackend.prototype.expectOne = function (match, description) {
            description = description || this.descriptionFromMatcher(match);
            var matches = this.match(match);
            if (matches.length > 1) {
                throw new Error("Expected one matching operation for criteria \"" + description + "\", found " + matches.length + " operations.");
            }
            if (matches.length === 0) {
                throw new Error("Expected one matching operation for criteria \"" + description + "\", found none.");
            }
            return matches[0];
        };
        /**
         * Expect that no outstanding operations match the given matcher, and throw an error
         * if any do.
         */
        ApolloTestingBackend.prototype.expectNone = function (match, description) {
            description = description || this.descriptionFromMatcher(match);
            var matches = this.match(match);
            if (matches.length > 0) {
                throw new Error("Expected zero matching operations for criteria \"" + description + "\", found " + matches.length + ".");
            }
        };
        /**
         * Validate that there are no outstanding operations.
         */
        ApolloTestingBackend.prototype.verify = function () {
            var open = this.open;
            if (open.length > 0) {
                // Show the methods and URLs of open operations in the error, for convenience.
                var operations = open
                    .map(function (testOp) { return testOp.operation.operationName; })
                    .join(', ');
                throw new Error("Expected no open operations, found " + open.length + ": " + operations);
            }
        };
        ApolloTestingBackend.prototype.isDocumentNode = function (docOrOp) {
            return !docOrOp.operationName;
        };
        ApolloTestingBackend.prototype.descriptionFromMatcher = function (matcher) {
            if (typeof matcher === 'string') {
                return "Match operationName: " + matcher;
            }
            else if (typeof matcher === 'object') {
                if (this.isDocumentNode(matcher)) {
                    return "Match DocumentNode";
                }
                var name_1 = matcher.operationName || '(any)';
                var variables = JSON.stringify(matcher.variables) || '(any)';
                return "Match operation: " + name_1 + ", variables: " + variables;
            }
            else {
                return "Match by function: " + matcher.name;
            }
        };
        ApolloTestingBackend = __decorate([
            core.Injectable()
        ], ApolloTestingBackend);
        return ApolloTestingBackend;
    }());

    var APOLLO_TESTING_CACHE = new core.InjectionToken('apollo-angular/testing cache');
    var APOLLO_TESTING_NAMED_CACHE = new core.InjectionToken('apollo-angular/testing named cache');
    var APOLLO_TESTING_CLIENTS = new core.InjectionToken('apollo-angular/testing named clients');
    function addClient(name, op) {
        op.clientName = name;
        return op;
    }
    var ApolloTestingModuleCore = /** @class */ (function () {
        function ApolloTestingModuleCore(apollo, backend, namedClients, cache, namedCaches) {
            function createOptions(name, c) {
                return {
                    link: new apolloLink.ApolloLink(function (operation) {
                        return backend.handle(addClient(name, operation));
                    }),
                    cache: c ||
                        new apolloCacheInmemory.InMemoryCache({
                            addTypename: false,
                        }),
                };
            }
            apollo.create(createOptions('default', cache));
            if (namedClients && namedClients.length) {
                namedClients.forEach(function (name) {
                    var caches = namedCaches && typeof namedCaches === 'object' ? namedCaches : {};
                    apollo.createNamed(name, createOptions(name, caches[name]));
                });
            }
        }
        ApolloTestingModuleCore.ctorParameters = function () { return [
            { type: apolloAngular.Apollo },
            { type: ApolloTestingBackend },
            { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APOLLO_TESTING_CLIENTS,] }] },
            { type: apolloCache.ApolloCache, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APOLLO_TESTING_CACHE,] }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APOLLO_TESTING_NAMED_CACHE,] }] }
        ]; };
        ApolloTestingModuleCore = __decorate([
            core.NgModule({
                imports: [apolloAngular.ApolloModule],
                providers: [
                    ApolloTestingBackend,
                    { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
                ],
            }),
            __param(2, core.Optional()),
            __param(2, core.Inject(APOLLO_TESTING_CLIENTS)),
            __param(3, core.Optional()),
            __param(3, core.Inject(APOLLO_TESTING_CACHE)),
            __param(4, core.Optional()),
            __param(4, core.Inject(APOLLO_TESTING_NAMED_CACHE))
        ], ApolloTestingModuleCore);
        return ApolloTestingModuleCore;
    }());
    var ApolloTestingModule = /** @class */ (function () {
        function ApolloTestingModule() {
        }
        ApolloTestingModule.withClients = function (names) {
            return {
                ngModule: ApolloTestingModuleCore,
                providers: [
                    {
                        provide: APOLLO_TESTING_CLIENTS,
                        useValue: names,
                    },
                ],
            };
        };
        ApolloTestingModule = __decorate([
            core.NgModule({
                imports: [ApolloTestingModuleCore],
            })
        ], ApolloTestingModule);
        return ApolloTestingModule;
    }());

    exports.APOLLO_TESTING_CACHE = APOLLO_TESTING_CACHE;
    exports.APOLLO_TESTING_NAMED_CACHE = APOLLO_TESTING_NAMED_CACHE;
    exports.ApolloTestingController = ApolloTestingController;
    exports.ApolloTestingModule = ApolloTestingModule;
    exports.TestOperation = TestOperation;
    exports.ɵa = APOLLO_TESTING_CLIENTS;
    exports.ɵb = ApolloTestingModuleCore;
    exports.ɵc = ApolloTestingBackend;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngApolloTesting.umd.js.map
