import * as tslib_1 from "tslib";
import { ApolloModule, Apollo } from 'apollo-angular';
import { ApolloLink } from 'apollo-link';
import { InMemoryCache } from 'apollo-cache-inmemory';
import { ApolloCache } from 'apollo-cache';
import { NgModule, InjectionToken, Inject, Optional, } from '@angular/core';
import { ApolloTestingController } from './controller';
import { ApolloTestingBackend } from './backend';
export const APOLLO_TESTING_CACHE = new InjectionToken('apollo-angular/testing cache');
export const APOLLO_TESTING_NAMED_CACHE = new InjectionToken('apollo-angular/testing named cache');
export const APOLLO_TESTING_CLIENTS = new InjectionToken('apollo-angular/testing named clients');
function addClient(name, op) {
    op.clientName = name;
    return op;
}
let ApolloTestingModuleCore = class ApolloTestingModuleCore {
    constructor(apollo, backend, namedClients, cache, namedCaches) {
        function createOptions(name, c) {
            return {
                link: new ApolloLink(operation => backend.handle(addClient(name, operation))),
                cache: c ||
                    new InMemoryCache({
                        addTypename: false,
                    }),
            };
        }
        apollo.create(createOptions('default', cache));
        if (namedClients && namedClients.length) {
            namedClients.forEach(name => {
                const caches = namedCaches && typeof namedCaches === 'object' ? namedCaches : {};
                apollo.createNamed(name, createOptions(name, caches[name]));
            });
        }
    }
};
ApolloTestingModuleCore.ctorParameters = () => [
    { type: Apollo },
    { type: ApolloTestingBackend },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CLIENTS,] }] },
    { type: ApolloCache, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CACHE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_NAMED_CACHE,] }] }
];
ApolloTestingModuleCore = tslib_1.__decorate([
    NgModule({
        imports: [ApolloModule],
        providers: [
            ApolloTestingBackend,
            { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
        ],
    }),
    tslib_1.__param(2, Optional()),
    tslib_1.__param(2, Inject(APOLLO_TESTING_CLIENTS)),
    tslib_1.__param(3, Optional()),
    tslib_1.__param(3, Inject(APOLLO_TESTING_CACHE)),
    tslib_1.__param(4, Optional()),
    tslib_1.__param(4, Inject(APOLLO_TESTING_NAMED_CACHE))
], ApolloTestingModuleCore);
export { ApolloTestingModuleCore };
let ApolloTestingModule = class ApolloTestingModule {
    static withClients(names) {
        return {
            ngModule: ApolloTestingModuleCore,
            providers: [
                {
                    provide: APOLLO_TESTING_CLIENTS,
                    useValue: names,
                },
            ],
        };
    }
};
ApolloTestingModule = tslib_1.__decorate([
    NgModule({
        imports: [ApolloTestingModuleCore],
    })
], ApolloTestingModule);
export { ApolloTestingModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXBvbGxvLWFuZ3VsYXIvdGVzdGluZy8iLCJzb3VyY2VzIjpbIm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsVUFBVSxFQUE2QixNQUFNLGFBQWEsQ0FBQztBQUNuRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsUUFBUSxFQUNSLGNBQWMsRUFDZCxNQUFNLEVBQ04sUUFBUSxHQUVULE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUNyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFLL0MsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxjQUFjLENBQ3BELDhCQUE4QixDQUMvQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxjQUFjLENBQzFELG9DQUFvQyxDQUNyQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxjQUFjLENBQ3RELHNDQUFzQyxDQUN2QyxDQUFDO0FBRUYsU0FBUyxTQUFTLENBQUMsSUFBWSxFQUFFLEVBQWlCO0lBQy9DLEVBQWdCLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUVwQyxPQUFPLEVBQWUsQ0FBQztBQUN6QixDQUFDO0FBU0QsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFDbEMsWUFDRSxNQUFjLEVBQ2QsT0FBNkIsRUFHN0IsWUFBdUIsRUFHdkIsS0FBd0IsRUFHeEIsV0FBaUI7UUFFakIsU0FBUyxhQUFhLENBQUMsSUFBWSxFQUFFLENBQTJCO1lBQzlELE9BQU87Z0JBQ0wsSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQy9CLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUMzQztnQkFDRCxLQUFLLEVBQ0gsQ0FBQztvQkFDRCxJQUFJLGFBQWEsQ0FBQzt3QkFDaEIsV0FBVyxFQUFFLEtBQUs7cUJBQ25CLENBQUM7YUFDTCxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRS9DLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDdkMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDMUIsTUFBTSxNQUFNLEdBQ1YsV0FBVyxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBRXBFLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5RCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBcENXLE1BQU07WUFDTCxvQkFBb0I7d0NBQzVCLFFBQVEsWUFDUixNQUFNLFNBQUMsc0JBQXNCO1lBSXRCLFdBQVcsdUJBRmxCLFFBQVEsWUFDUixNQUFNLFNBQUMsb0JBQW9COzRDQUUzQixRQUFRLFlBQ1IsTUFBTSxTQUFDLDBCQUEwQjs7QUFYekIsdUJBQXVCO0lBUG5DLFFBQVEsQ0FBQztRQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztRQUN2QixTQUFTLEVBQUU7WUFDVCxvQkFBb0I7WUFDcEIsRUFBQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFDO1NBQ3RFO0tBQ0YsQ0FBQztJQUtHLG1CQUFBLFFBQVEsRUFBRSxDQUFBO0lBQ1YsbUJBQUEsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUE7SUFFOUIsbUJBQUEsUUFBUSxFQUFFLENBQUE7SUFDVixtQkFBQSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtJQUU1QixtQkFBQSxRQUFRLEVBQUUsQ0FBQTtJQUNWLG1CQUFBLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0dBWDFCLHVCQUF1QixDQXNDbkM7U0F0Q1ksdUJBQXVCO0FBMkNwQyxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQUM5QixNQUFNLENBQUMsV0FBVyxDQUFDLEtBQWU7UUFDaEMsT0FBTztZQUNMLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxzQkFBc0I7b0JBQy9CLFFBQVEsRUFBRSxLQUFLO2lCQUNoQjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBO0FBWlksbUJBQW1CO0lBSC9CLFFBQVEsQ0FBQztRQUNSLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDO0tBQ25DLENBQUM7R0FDVyxtQkFBbUIsQ0FZL0I7U0FaWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Fwb2xsb01vZHVsZSwgQXBvbGxvfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XG5pbXBvcnQge0Fwb2xsb0xpbmssIE9wZXJhdGlvbiBhcyBMaW5rT3BlcmF0aW9ufSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQge0luTWVtb3J5Q2FjaGV9IGZyb20gJ2Fwb2xsby1jYWNoZS1pbm1lbW9yeSc7XG5pbXBvcnQge0Fwb2xsb0NhY2hlfSBmcm9tICdhcG9sbG8tY2FjaGUnO1xuaW1wb3J0IHtcbiAgTmdNb2R1bGUsXG4gIEluamVjdGlvblRva2VuLFxuICBJbmplY3QsXG4gIE9wdGlvbmFsLFxuICBNb2R1bGVXaXRoUHJvdmlkZXJzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtBcG9sbG9UZXN0aW5nQ29udHJvbGxlcn0gZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB7QXBvbGxvVGVzdGluZ0JhY2tlbmR9IGZyb20gJy4vYmFja2VuZCc7XG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcGVyYXRpb24nO1xuXG5leHBvcnQgdHlwZSBOYW1lZENhY2hlcyA9IFJlY29yZDxzdHJpbmcsIEFwb2xsb0NhY2hlPGFueT4gfCB1bmRlZmluZWQgfCBudWxsPjtcblxuZXhwb3J0IGNvbnN0IEFQT0xMT19URVNUSU5HX0NBQ0hFID0gbmV3IEluamVjdGlvblRva2VuPEFwb2xsb0NhY2hlPGFueT4+KFxuICAnYXBvbGxvLWFuZ3VsYXIvdGVzdGluZyBjYWNoZScsXG4pO1xuXG5leHBvcnQgY29uc3QgQVBPTExPX1RFU1RJTkdfTkFNRURfQ0FDSEUgPSBuZXcgSW5qZWN0aW9uVG9rZW48TmFtZWRDYWNoZXM+KFxuICAnYXBvbGxvLWFuZ3VsYXIvdGVzdGluZyBuYW1lZCBjYWNoZScsXG4pO1xuXG5leHBvcnQgY29uc3QgQVBPTExPX1RFU1RJTkdfQ0xJRU5UUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmdbXT4oXG4gICdhcG9sbG8tYW5ndWxhci90ZXN0aW5nIG5hbWVkIGNsaWVudHMnLFxuKTtcblxuZnVuY3Rpb24gYWRkQ2xpZW50KG5hbWU6IHN0cmluZywgb3A6IExpbmtPcGVyYXRpb24pOiBPcGVyYXRpb24ge1xuICAob3AgYXMgT3BlcmF0aW9uKS5jbGllbnROYW1lID0gbmFtZTtcblxuICByZXR1cm4gb3AgYXMgT3BlcmF0aW9uO1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQXBvbGxvTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgQXBvbGxvVGVzdGluZ0JhY2tlbmQsXG4gICAge3Byb3ZpZGU6IEFwb2xsb1Rlc3RpbmdDb250cm9sbGVyLCB1c2VFeGlzdGluZzogQXBvbGxvVGVzdGluZ0JhY2tlbmR9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBBcG9sbG9UZXN0aW5nTW9kdWxlQ29yZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGFwb2xsbzogQXBvbGxvLFxuICAgIGJhY2tlbmQ6IEFwb2xsb1Rlc3RpbmdCYWNrZW5kLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChBUE9MTE9fVEVTVElOR19DTElFTlRTKVxuICAgIG5hbWVkQ2xpZW50cz86IHN0cmluZ1tdLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChBUE9MTE9fVEVTVElOR19DQUNIRSlcbiAgICBjYWNoZT86IEFwb2xsb0NhY2hlPGFueT4sXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEFQT0xMT19URVNUSU5HX05BTUVEX0NBQ0hFKVxuICAgIG5hbWVkQ2FjaGVzPzogYW55LCAvLyBGSVg6IHVzaW5nIE5hbWVkQ2FjaGVzIGhlcmUgbWFrZXMgbmdjIGZhaWxcbiAgKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyhuYW1lOiBzdHJpbmcsIGM/OiBBcG9sbG9DYWNoZTxhbnk+IHwgbnVsbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluazogbmV3IEFwb2xsb0xpbmsob3BlcmF0aW9uID0+XG4gICAgICAgICAgYmFja2VuZC5oYW5kbGUoYWRkQ2xpZW50KG5hbWUsIG9wZXJhdGlvbikpLFxuICAgICAgICApLFxuICAgICAgICBjYWNoZTpcbiAgICAgICAgICBjIHx8XG4gICAgICAgICAgbmV3IEluTWVtb3J5Q2FjaGUoe1xuICAgICAgICAgICAgYWRkVHlwZW5hbWU6IGZhbHNlLFxuICAgICAgICAgIH0pLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBhcG9sbG8uY3JlYXRlKGNyZWF0ZU9wdGlvbnMoJ2RlZmF1bHQnLCBjYWNoZSkpO1xuXG4gICAgaWYgKG5hbWVkQ2xpZW50cyAmJiBuYW1lZENsaWVudHMubGVuZ3RoKSB7XG4gICAgICBuYW1lZENsaWVudHMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgY29uc3QgY2FjaGVzID1cbiAgICAgICAgICBuYW1lZENhY2hlcyAmJiB0eXBlb2YgbmFtZWRDYWNoZXMgPT09ICdvYmplY3QnID8gbmFtZWRDYWNoZXMgOiB7fTtcblxuICAgICAgICBhcG9sbG8uY3JlYXRlTmFtZWQobmFtZSwgY3JlYXRlT3B0aW9ucyhuYW1lLCBjYWNoZXNbbmFtZV0pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQXBvbGxvVGVzdGluZ01vZHVsZUNvcmVdLFxufSlcbmV4cG9ydCBjbGFzcyBBcG9sbG9UZXN0aW5nTW9kdWxlIHtcbiAgc3RhdGljIHdpdGhDbGllbnRzKG5hbWVzOiBzdHJpbmdbXSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQXBvbGxvVGVzdGluZ01vZHVsZUNvcmUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEFQT0xMT19URVNUSU5HX0NMSUVOVFMsXG4gICAgICAgICAgdXNlVmFsdWU6IG5hbWVzLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=