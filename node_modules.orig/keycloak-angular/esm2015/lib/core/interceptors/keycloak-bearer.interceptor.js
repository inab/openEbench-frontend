import { Injectable } from '@angular/core';
import { mergeMap } from 'rxjs/operators';
import { KeycloakService } from '../services/keycloak.service';
export class KeycloakBearerInterceptor {
    constructor(keycloak) {
        this.keycloak = keycloak;
    }
    isUrlExcluded({ method, url }, { urlPattern, httpMethods }) {
        let httpTest = httpMethods.length === 0 ||
            httpMethods.join().indexOf(method.toUpperCase()) > -1;
        let urlTest = urlPattern.test(url);
        return httpTest && urlTest;
    }
    intercept(req, next) {
        const { enableBearerInterceptor, excludedUrls } = this.keycloak;
        if (!enableBearerInterceptor) {
            return next.handle(req);
        }
        const shallPass = excludedUrls.findIndex(item => this.isUrlExcluded(req, item)) > -1;
        if (shallPass) {
            return next.handle(req);
        }
        return this.keycloak.addTokenToHeader(req.headers).pipe(mergeMap(headersWithBearer => {
            const kcReq = req.clone({ headers: headersWithBearer });
            return next.handle(kcReq);
        }));
    }
}
KeycloakBearerInterceptor.decorators = [
    { type: Injectable }
];
KeycloakBearerInterceptor.ctorParameters = () => [
    { type: KeycloakService }
];
if (false) {
    KeycloakBearerInterceptor.prototype.keycloak;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2xvYWstYmVhcmVyLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8va2V5Y2xvYWstYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2ludGVyY2VwdG9ycy9rZXljbG9hay1iZWFyZXIuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBVS9ELE1BQU0sT0FBTyx5QkFBeUI7SUFDcEMsWUFBb0IsUUFBeUI7UUFBekIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7SUFBRyxDQUFDO0lBVXpDLGFBQWEsQ0FDbkIsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFvQixFQUNqQyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQW9CO1lBRXpDLFFBQVEsR0FDVixXQUFXLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDeEIsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFbkQsT0FBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBRWxDLE9BQU8sUUFBUSxJQUFJLE9BQU8sQ0FBQztJQUM3QixDQUFDO0lBU00sU0FBUyxDQUNkLEdBQXFCLEVBQ3JCLElBQWlCO2NBRVgsRUFBRSx1QkFBdUIsRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUTtRQUMvRCxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCO2NBRUssU0FBUyxHQUNiLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwRSxJQUFJLFNBQVMsRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNyRCxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRTtrQkFDckIsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQztZQUN2RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OztZQXJERixVQUFVOzs7WUFURixlQUFlOzs7SUFXViw2Q0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgTWF1cmljaW8gR2VtZWxsaSBWaWdvbG8gYW5kIGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXVyaWNpb3ZpZ29sby9rZXljbG9hay1hbmd1bGFyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwSW50ZXJjZXB0b3IsXG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cEV2ZW50XG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEtleWNsb2FrU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2tleWNsb2FrLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXhjbHVkZWRVcmxSZWdleCB9IGZyb20gJy4uL2ludGVyZmFjZXMva2V5Y2xvYWstb3B0aW9ucyc7XG5cbi8qKlxuICogVGhpcyBpbnRlcmNlcHRvciBpbmNsdWRlcyB0aGUgYmVhcmVyIGJ5IGRlZmF1bHQgaW4gYWxsIEh0dHBDbGllbnQgcmVxdWVzdHMuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gZXhjbHVkZSBzb21lIFVSTHMgZnJvbSBhZGRpbmcgdGhlIGJlYXJlciwgcGxlYXNlLCB0YWtlIGEgbG9va1xuICogYXQgdGhlIHtAbGluayBLZXljbG9ha09wdGlvbnN9IGJlYXJlckV4Y2x1ZGVkVXJscyBwcm9wZXJ0eS5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEtleWNsb2FrQmVhcmVySW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGtleWNsb2FrOiBLZXljbG9ha1NlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgdXJsIGlzIGV4Y2x1ZGVkIGZyb20gaGF2aW5nIHRoZSBCZWFyZXIgQXV0aG9yaXphdGlvblxuICAgKiBoZWFkZXIgYWRkZWQuXG4gICAqXG4gICAqIEBwYXJhbSByZXEgaHR0cCByZXF1ZXN0IGZyb20gQGFuZ3VsYXIgaHR0cCBtb2R1bGUuXG4gICAqIEBwYXJhbSBleGNsdWRlZFVybFJlZ2V4IGNvbnRhaW5zIHRoZSB1cmwgcGF0dGVybiBhbmQgdGhlIGh0dHAgbWV0aG9kcyxcbiAgICogZXhjbHVkZWQgZnJvbSBhZGRpbmcgdGhlIGJlYXJlciBhdCB0aGUgSHR0cCBSZXF1ZXN0LlxuICAgKi9cbiAgcHJpdmF0ZSBpc1VybEV4Y2x1ZGVkKFxuICAgIHsgbWV0aG9kLCB1cmwgfTogSHR0cFJlcXVlc3Q8YW55PixcbiAgICB7IHVybFBhdHRlcm4sIGh0dHBNZXRob2RzIH06IEV4Y2x1ZGVkVXJsUmVnZXhcbiAgKTogYm9vbGVhbiB7XG4gICAgbGV0IGh0dHBUZXN0ID1cbiAgICAgIGh0dHBNZXRob2RzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgaHR0cE1ldGhvZHMuam9pbigpLmluZGV4T2YobWV0aG9kLnRvVXBwZXJDYXNlKCkpID4gLTE7XG5cbiAgICBsZXQgdXJsVGVzdCA9IHVybFBhdHRlcm4udGVzdCh1cmwpO1xuXG4gICAgcmV0dXJuIGh0dHBUZXN0ICYmIHVybFRlc3Q7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJjZXB0IGltcGxlbWVudGF0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZSByZXF1ZXN0IHVybCBtYXRjaGVzIHRoZSBleGNsdWRlZFVybHMuXG4gICAqIElmIG5vdCwgYWRkcyB0aGUgQXV0aG9yaXphdGlvbiBoZWFkZXIgdG8gdGhlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSByZXFcbiAgICogQHBhcmFtIG5leHRcbiAgICovXG4gIHB1YmxpYyBpbnRlcmNlcHQoXG4gICAgcmVxOiBIdHRwUmVxdWVzdDxhbnk+LFxuICAgIG5leHQ6IEh0dHBIYW5kbGVyXG4gICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBjb25zdCB7IGVuYWJsZUJlYXJlckludGVyY2VwdG9yLCBleGNsdWRlZFVybHMgfSA9IHRoaXMua2V5Y2xvYWs7XG4gICAgaWYgKCFlbmFibGVCZWFyZXJJbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2hhbGxQYXNzOiBib29sZWFuID1cbiAgICAgIGV4Y2x1ZGVkVXJscy5maW5kSW5kZXgoaXRlbSA9PiB0aGlzLmlzVXJsRXhjbHVkZWQocmVxLCBpdGVtKSkgPiAtMTtcbiAgICBpZiAoc2hhbGxQYXNzKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXljbG9hay5hZGRUb2tlblRvSGVhZGVyKHJlcS5oZWFkZXJzKS5waXBlKFxuICAgICAgbWVyZ2VNYXAoaGVhZGVyc1dpdGhCZWFyZXIgPT4ge1xuICAgICAgICBjb25zdCBrY1JlcSA9IHJlcS5jbG9uZSh7IGhlYWRlcnM6IGhlYWRlcnNXaXRoQmVhcmVyIH0pO1xuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUoa2NSZXEpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=